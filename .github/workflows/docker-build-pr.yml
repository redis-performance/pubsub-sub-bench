name: Docker Build - PR Validation

on:
  pull_request:
    branches: [master, main]
    paths:
      - 'Dockerfile'
      - '.dockerignore'
      - 'docker-build.sh'
      - 'docker-run.sh'
      - 'subscriber.go'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/docker-build-pr.yml'

env:
  IMAGE_NAME: pubsub-sub-bench-pr

jobs:
  docker-build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for Git info

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract Git metadata
      id: meta
      run: |
        GIT_SHA=$(git rev-parse HEAD)
        GIT_DIRTY=$(git diff --no-ext-diff 2>/dev/null | wc -l)
        echo "git_sha=${GIT_SHA}" >> $GITHUB_OUTPUT
        echo "git_dirty=${GIT_DIRTY}" >> $GITHUB_OUTPUT
        echo "short_sha=${GIT_SHA:0:7}" >> $GITHUB_OUTPUT

    - name: Build Docker image (single platform)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: ${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
        build-args: |
          GIT_SHA=${{ steps.meta.outputs.git_sha }}
          GIT_DIRTY=${{ steps.meta.outputs.git_dirty }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        echo "Testing Docker image functionality..."
        
        # Test help command
        docker run --rm ${{ env.IMAGE_NAME }}:pr-${{ github.event.number }} --help
        
        # Test version output
        docker run --rm ${{ env.IMAGE_NAME }}:pr-${{ github.event.number }} --version
        
        echo "‚úÖ Docker image tests passed!"

    - name: Build multi-platform image (validation only)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-multiplatform
        build-args: |
          GIT_SHA=${{ steps.meta.outputs.git_sha }}
          GIT_DIRTY=${{ steps.meta.outputs.git_dirty }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate PR comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `## üê≥ Docker Build Validation

          ‚úÖ **Docker build successful!**

          **Platforms tested:**
          - ‚úÖ linux/amd64 (built and tested)
          - ‚úÖ linux/arm64 (build validated)

          **Git SHA:** \`${{ steps.meta.outputs.git_sha }}\`

          **Image details:**
          - Single platform: \`${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}\`
          - Multi-platform: \`${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-multiplatform\`

          **Tests performed:**
          - ‚úÖ Help command execution
          - ‚úÖ Version output validation
          - ‚úÖ Multi-platform build validation

          The Docker image is ready for deployment! üöÄ`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: Clean up test images
      if: always()
      run: |
        docker rmi ${{ env.IMAGE_NAME }}:pr-${{ github.event.number }} || true
        echo "Cleanup completed"
